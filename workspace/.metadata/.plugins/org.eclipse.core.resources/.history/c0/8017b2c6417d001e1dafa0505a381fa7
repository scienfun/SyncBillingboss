# Methods added to this helper will be available to all templates in the application.
require "ruby-debug"
module ApplicationHelper
  # http://en.wikipedia.org/wiki/ISO_639-1 codes localized into the users language
  # not all of these are supported, but they are the likely candidates
  # define them here; enabled in available_languages in application.yml
  def known_languages
    [['af', 'Afrikaans', s_('iso_639-1 af|Afrikaans') ],
    ['ar', 'العربية', s_('iso_639-1 ar|Arabic') ],
    ['bn', 'বাংলা', s_('iso_639-1 bn|Bengali') ],
    ['cs', 'Česky', s_('iso_639-1 cs|Czech') ],
    ['da', 'Dansk', s_('iso_639-1 da|Danish') ],
    ['de', 'Deutsch', s_('iso_639-1 de|German') ],
    ['el', 'Ελληνικά', s_('iso_639-1 el|Greek') ],
    ['en', 'English', s_('iso_639-1 en|English') ],
    ['es', 'Español', s_('iso_639-1 es|Spanish') ],
    ['fi', 'Suomi', s_('iso_639-1 fi|Finnish') ],
    ['fr', 'Français', s_('iso_639-1 fr|French') ],
    ['gu', 'ગુજરાતી', s_('iso_639-1 gu|Gujarati') ],
    ['he', 'עברית', s_('iso_639-1 he|Hebrew') ],
    ['hi', 'हिन्दी', s_('iso_639-1 hi|Hindi') ],
    ['it', 'Italiano', s_('iso_639-1 it|Italian') ],
    ['ja', '日本語', s_('iso_639-1 ja|Japanese') ],
    ['jv', 'basa Jawa', s_('iso_639-1 jv|Javanese') ],
    ['ko', '한국어', s_('iso_639-1 ko|Korean') ],
    ['mr', 'मराठी', s_('iso_639-1 mr|Marathi') ],
    ['ms', 'بهاس ملايو‎', s_('iso_639-1 ms|Malay') ],
    ['nl', 'Nederlands', s_('iso_639-1 nl|Dutch') ],
    ['pa_PK', 'پنجابی', s_('iso_639-1 pa_PK|Punjabi (Pakistan)') ],
    ['pa_IN', 'ਪੰਜਾਬੀ', s_('iso_639-1 pa_IN|Punjabi (India)') ],
    ['pl', 'Polski', s_('iso_639-1 pl|Polish') ],
    ['pt', 'Português', s_('iso_639-1 pt|Portuguese') ],
    ['pt_BR', 'Português (Brasil)', s_('iso_639-1 pt_BR|Portuguese (Brazil)') ],
    ['ru', 'Русский', s_('iso_639-1 ru|Russian') ],
    ['sd', 'सिन्धी; سنڌي، سندھی‎', s_('iso_639-1 sd|Sindhi') ],
    ['sv', 'Svenska', s_('iso_639-1 sv|Swedish') ],
    ['ta', 'தமிழ்', s_('iso_639-1 ta|Tamil') ],
    ['te', 'తెలుగు', s_('iso_639-1 te|Telugu') ],
    ['tr', 'Türk', s_('iso_639-1 tr|Turkish') ],
    ['ur', 'اردو', s_('iso_639-1 ur|Urdu') ],
    ['zh_CN', '中文', s_('iso_639-1 zh_CN|Chinese (China)') ],
    ['zh_HK', '粵語 香港', s_('iso_639-1 zh_HK|Chinese (Hong Kong)') ],
    ['zh_TW', '國語 台灣', s_('iso_639-1 zh_TW|Chinese (Taiwan)') ] ]
  end

  # return the supported languages as defined in application.yml
  # which is where a specific language should be enabled
  # Warning - this is bypassed in lib/localizer.rb
  def available_languages
    AppConfig.available_languages
  end

  # Warning - this is bypassed in lib/localizer.rb
  def default_locale
    AppConfig.default_locale
  end

  def default_language
    AppConfig.default_language
  end

  def humanize_language( iso639 )
    begin
      known_languages.find{ |x,y,z| x == iso639 }[1]
    rescue Exception => e
      _('Unknown language')
    end
  end
  
  # find the localized name of the language represented by the 2-letter 
  # iso-639 code ("en" yields "English" or its equivalent in the active language)
  # also works with locales such as zh_CN
  def localize_language( iso639 )
    begin
      known_languages.find{ |x,y,z| x == iso639 }[2]
    rescue Exception => e
      _('Unknown language')
    end
  end
  
  # appropriate for selecting a language for someone else from a list
  # sorted alphabetically by local language
  def select_languages_localized
    available_languages.map{ |x| known_languages.assoc(x)}.map{ |y| [y[2],y[0]]}.sort!
  end

  # appropriate for letting a user find her own language in a list
  # ordered by iso 639-1 code
  def select_languages_native
    available_languages.map{ |x| known_languages.assoc(x)}.map{ |y| [y[1],y[0]]}.sort!
  end
  
  def localized_country(country_code)
    full_country_name = ""
    ActionView::Helpers::FormOptionsHelper::COUNTRIES.map {|c| c.include?(country_code) ? full_country_name = c.first : false}
    return full_country_name
  end
  
  def tz(time_at)
    TzTime.zone.utc_to_local(time_at.utc)
  end
  
  def customer_language(customer)
    if !customer.language.blank?
      customer.language
    elsif !cookies["lang"].nil?
      cookies["lang"] # shouldn't we be using locale.language ?
    else
      default_language
    end
  end
  
  def gather_params

    [:referral_code, :signup_type].each do |p|
        session[p] = params[p] unless params[p].blank?
    end
    if (session[:signup_type].blank? or !User.SignupTypes.include?(session[:signup_type]))
      if logged_in? and !current_user.signup_type.blank?
        session[:signup_type] = current_user.signup_type
      else
        session[:signup_type] = "soho"
      end
    end

  end
 
  def is_mobile?
    debugger
    if request.headers["HTTP_USER_AGENT"].include? "Android 1.5"
      true
    else
      false
    end
  end
 
  #wip
  def link_button(options = {})

    btn_str = ""
    btn_str << "<table style='width: 100%'><tr><td align='#{options[:wrap_align]}'>" unless options[:wrap_align].blank?
    btn_str << "<table"
    btn_str << " style='width: #{options[:width]}'" unless options[:width].blank?
    btn_str << ">"
    btn_str << "<tr>"
    btn_str << "<td>"
    btn_str << "<img src='/themes/#{user_theme}/images/buttons/#{options[:style]}/btn-left.gif'>"
    btn_str << "</td>"    
    btn_str << "<td style='text-align: center; background-image: url(/themes/#{user_theme}/images/buttons/#{options[:style]}/btn-center.gif)"
    btn_str << '; width: 100%' unless options[:width].blank?
    btn_str << "'>"
    btn_str << "<p"
    btn_str << " style='#{options[:text_style]}'" unless options[:text_style].blank?
    btn_str << ">"
    btn_str << "<input type='submit' name='commit' value='#{options[:text]}'/>" if (!options[:submit].blank? && (options[:submit] == true))
    btn_str << options[:text] unless (!options[:submit].blank? && (options[:submit] == true))
    btn_str << "</p>"
    btn_str << "</td>"    
    btn_str << "<td>"
    btn_str << "<img src='/themes/#{user_theme}/images/buttons/#{options[:style]}/btn-right.gif'>"    
    btn_str << "</td>"    
    btn_str << "</tr>"
    btn_str << "</table>"
    btn_str << "</td></tr></table>" unless options[:wrap_align].blank?
    btn_str
  end

  def logo_url
    str = ""
    #if !@at_home
    #  str += "style='cursor: pointer;' onclick=location.href='/'"
    #end
    str
  end

  def user_string

    if current_user and (current_user != :false)
      log_out = _("Log out")
      logged_in_as = _("Logged in as")
      not_logged_in = _("Not logged in")
      "<span class='top_right_corner_font'>#{logged_in_as} #{current_user.login} (<a href='/logout/'>#{log_out}</a>)</span>"
    else
      "<span class='top_right_corner_font'>#{not_logged_in} (<a href='/login/'>#{_('Login')}</a>)</span>"
    end
  end
  
  def homepage_user_string
    log_out = _("Log out")
    return_to_my_data = _("Return to my data")
    
    if logged_in?
      current_view = current_user.profile.current_view
		 link_to(return_to_my_data, {:controller => "tabs", :action => current_view || "biller"}) + content_tag(:span, "|", :class=>"divide")	+ "#{link_to(log_out, '/logout')}"
    else
      link_to("<span>"+_("Log In")+"</span>", new_session_url(:protocol => ::AppConfig.use_ssl? ? 'https://' : 'http://' ))
		end
  end
  
  def user_string_external(home_page = false)
    return_to_my_data = _("Return to my data")
    log_out = _("Log out")
    log_in = _("Log in")
    sign_up = _("Sign up")
    
    if logged_in?
      current_view = current_user.profile.current_view
      link = link_to(return_to_my_data, {:controller => "tabs", :action => current_view || "biller"})
      str = "<li>" + _("Logged in as %{user} (%{logout_link})") % { :user => current_user.login, :logout_link => link_to(log_out, "/logout")} + "</li><li>#{link}</li>"
      #str = "<li>#{logged_in_as} #{current_user.login} (#{link_to(log_out, "/logout")})</li><li>#{link}</li>"
    else
      str = "<li>#{link_to(log_in, '/login')}</li><li>#{link_to(sign_up, '/signup')}</li>" unless home_page
    end
    str
  end

  def the_current_user
    if current_user and (current_user != :false)
      current_user.login
    else
      ""
    end   
  end
  
  def page_title
    if !@custom_title 
      "#{controller.controller_name.humanize}: #{controller.action_name}" 
    else 
      @custom_title 
    end
  end
  
  def invoice_currency(invoice)
    if invoice.new_record?
      current_user.profile.currency
    else
      invoice.currency
    end
  end

  def db_agnostic_id(prefix, obj=nil)
    @db_agnostic_ids ||= Hash.new
    @db_agnostic_ids[prefix] ||= 1
    unless obj.nil?
      if(obj.new_record?)
        out = "#{prefix}_new_#{@db_agnostic_ids[prefix]}"
        @db_agnostic_ids[prefix] += 1
      else
        out = "#{prefix}_#{obj.to_param}"
      end
    end
    out
  end
  
  def db_agnostic_id_js(prefix)
    db_agnostic_id(prefix)
    out = <<EOS
<script type="text/javascript">
  Sage.db_agnostic_ids = Sage.db_agnostic_ids === undefined ? new Hash({}) : Sage.db_agnostic_ids;
  Sage.db_agnostic_ids['#{prefix}'] = #{@db_agnostic_ids[prefix]};
</script>
EOS
end

  def increment_ajax_counter(need_script_tag=false)
    return "" unless RAILS_ENV == 'test'
    out = ""
    out << "<script type=\"text/javascript\">\n" if need_script_tag
    out << "Sage.increment_ajax_counter();\n"
    out << "</script>\n" if need_script_tag
    out
  end
  
  #FIXME workaround to get acceptance test running
  def toggle_customer
    return "" if RAILS_ENV == 'test'
    'Sage.toggle_customer();'
  end
  
  #FIXME for some reason this is not available in an rjs template ?????
  def increment_ajax_counter_rjs
    return unless RAILS_ENV == 'test'
    page.call 'Sage.increment_ajax_counter'
  end
  
  def send_object_by_mail_link(text, obj, mail_name='send', html_options={})
    delivery = Delivery.new(:deliverable => obj, :mail_name => mail_name)
    if text.nil?
      new_delivery_path(delivery.request_params)
    else
      link_to text, new_delivery_path(delivery.request_params), html_options
    end
  end
  
  # hoisted by my own premature abstracting petard
  def hardcoded_send_invoice_link_for_javascript
    "/deliveries/new?delivery%5Bdeliverable_id%5D={0}&delivery%5Bdeliverable_type%5D=Invoice&delivery%5Bmail_name%5D=send"
  end
  
  def send_invoice_path(invoice)
    send_object_by_mail_link(nil, invoice, 'send')
  end

  def deliverable_url(delivery, path_only=true)
    which = path_only ? 'path' : 'url'
    self.send("edit_#{delivery.deliverable.class.underscore}_#{which}", delivery.deliverable)
  end
  
  def field_if_not_blank(record, empty="", &block)
    return empty if record.nil? 
    field = yield
    return empty if field.blank?
    field
  end
  
  def label_if_field_not_blank(record, label="", &block)
    
    return "" if record.nil? 
     
    field = yield
    return "" if field.blank?
   
    return label
  end
  
  
  def format_amount(amount)
    number_to_currency(amount)
  end

  def protect_form(form_name)
    #the params[:protect] conditione is necessary for acceptance test, but protect_forms will
    #only ever be true in test environment, so this does not impact production at all
    if ::AppConfig.protect_forms || (params[:protect] == "1")
      <<-EOJS
      <script type="text/javascript">
      	Sage.protect_form('#{form_name}', "#{_('You have unsaved changes on this page.\n\n You will lose all unsaved changes if you leave the page!')}");
      </script>
      EOJS
    end
  end
  
  def testable_field(name, text)
    if RAILS_ENV == 'test'
      "<span name=\"#{name}\">#{text}</span>"
    else
      text
    end
  end
  
  def stylesheet_global
    stylesheet_link_tag "/themes/global.css", :media => 'screen, print'  
  end
  
  def stylesheet_ie6
    %|
      <!--[if IE 6]>
        <link href="/themes/#{user_style}/ie6.css" media="screen, print" rel="stylesheet" type="text/css" />
      <![endif]-->
    |
  end
  
  def stylesheet_theme
    stylesheet_link_tag "/themes/#{user_style}/shared.css", :media => 'screen, print'     
  end

  #return a css file name for the current controller
  #if custom is not supplied, use the controller name as the name of the css
  #if custom is present, use custom.css
  def stylesheet_theme_controller(custom=nil)
    if (custom != nil) or (!controller.blank?)
      stylesheet_link_tag "/themes/#{user_style}/#{(custom)||(controller_name_for_theme)}.css", :media => 'screen, print'        
    end
  end
  
  def stylesheet_theme_controller_printable(print = false, the_controller = nil)
    if ((the_controller != nil) or (!controller.blank?)) && @printable
      if print
        stylesheet_link_tag("/themes/#{user_style}/#{the_controller||controller_name_for_theme}_print.css", :media => 'screen, print')
      else
        stylesheet_link_tag("/themes/#{user_style}/#{the_controller||controller_name_for_theme}_print.css", :media => 'print')
      end
    end
  end
  
  def default_theme
    stylesheet_link_tag "/themes/default/shared.css", :media => 'screen, print'     
  end
  
  def default_theme_controller(custom=nil)
    if (custom != nil) or (!controller.blank?)
      stylesheet_link_tag "/themes/default/#{(custom)||(controller_name_for_theme)}.css", :media => 'screen, print'        
    end
  end
  
  def default_theme_controller_printable(print = false)
    if !controller.blank? && @printable
      if print
        stylesheet_link_tag "/themes/default/#{controller_name_for_theme}_print.css", :media => 'screen, print'
      else
        stylesheet_link_tag "/themes/default/#{controller_name_for_theme}_print.css", :media => 'print'
      end
    end
  end
  
  def user_theme
    if !current_user.blank? && current_user != :false && !current_user.profile.blank? && !current_user.profile.theme.blank?
      "#{current_user.profile.theme}"       
    else
      "Default"       
    end    
  end
  
  def user_style
    theme = Theme.load_theme(user_theme)
    return theme.style_path
  end
  
  def xpath_theme
    theme = Theme.load_theme(user_theme)
    stylesheet_link_tag "/ext/resources/css/xtheme-#{theme.ext_path}.css" unless theme.ext_path.blank?
  end

  def hidden_content_tag(name, options = {}, &block)
    unless options.delete(:show_if)
      options[:style] = "display: none; #{ options[:style] }"
    end
    content_tag_block(name, options, &block)
  end

  def content_tag_block(tag_name, options = {}, &block)
    concat(content_tag(tag_name, capture(&block), options), block.binding)
  end

  def hidden_div(options = {}, &block)
    hidden_content_tag(:div, options, &block)
  end
  
  def current_signup_type
    if !session[:signup_type].blank? and User.SignupTypes.include?(session[:signup_type])
      return session[:signup_type]
    else
      return "soho"
    end
  end
  
  def taf_header_text 
    sample_email_string = _("View sample e-mail")
    
    if current_signup_type == "rac" || current_signup_type == "ssan"
      text = ""
      text << "<span id='ssan_text'>"
      text << _("Send your clients an email to tell them about Billing Boss.")
      text << "  "
      text << "<a href='/themes/default/images/r_soho.gif' target='_new'>#{sample_email_string}</a>"
      text << "<br/><br/>"
      text << _("Don't worry, your customers' e-mail addresses will only be used to tell them about Billing Boss and not for any other purpose.")
      text << "</span>"
      return text
    else
      text = ""
      text << "<span id='soho_text'>"
      text << _("Send your friends an email to tell them about Billing Boss.")
      text << "  "
      text << "<a href='/themes/default/images/r_soho.gif' target='_new'>#{sample_email_string}</a>"
      text << "<br/><br/>"
      text << _("Don't worry, your friends' e-mail addresses will only be used to tell them about Billing Boss and not for any other purpose.")
      text << "</span>"
      return text
    end
  end
end


def menu_builder(page_id)
  current_view = current_user.profile.current_view  
  view_factory(current_view) << tab_factory(page_id, current_view) 
end

def tab_factory(page_id, current_view)
  case current_view  
  when :admin   
    # admin_tabs are the tabs shown for a admin user        
    tabs = [[_("Overview"), "admin/overview/"]]
    Admin.admin_roles_for(current_user, true).each do |a|  
      tabs << [a.humanize, "admin/#{a}/"]
    end
  when :bookkeeper  
    # bookkeeper_tabs are the tabs shown for a bookkeeper user        
    tabs = [ 
            [_("Reports"), "bookkeeping_clients"] #,
            #["Reports", "reports"]
          ]
  else # biller  
    # first element is the actual text used for the tab and second is the link to the page  
    # biller_tabs are the tabs shown for a normal user
    tabs = []
    tabs << [_("Invoices"),"invoices/overview"]
    tabs << [_("Customers"),"customers/overview"]
    tabs << [_("Reports"), "reports"]
    tabs << [_("Share Data"),"bookkeepers"] if current_user.bookkeeper.nil?
    tabs << [_("Settings"),"profiles"]
  end           
  
  
  # one empty list item to provide a left margin
  content = ""
  tabs.each do |each_tab |
    css_a_class = ((page_id == each_tab[0]) ? 'menu-tab-selected' : 'inactive')
    css_class = ((page_id == each_tab[0]) ? 'menu-li-selected' : 'inactive')
    content <<  content_tag('li',
      content_tag('a',  each_tab[0], 
      :href => "/#{each_tab[1]}",
      :class => css_a_class), 
      :class => css_class) + " "
  end
  content_tag(:ul, content, :id => 'maintab')
end

def view_factory(current_view)

  hash_links = ActiveSupport::OrderedHash.new
  hash_links[:admin] = {
            "current" => _("My Admin View"),
            "inactive" => _("Switch to My Admin View"),
            "path" => "tabs/admin"
            } if current_user.is_admin?
  hash_links[:biller] = { 
            "current" => _("My Billing View"),
            "inactive" => _("Switch to My Billing View"),
            "path" => "tabs/biller"
            }
  hash_links[:bookkeeper] = { 
            "current" => _("My Clients View"),
            "inactive" => _("Switch to My Clients View"),
            "path" => "tabs/bookkeeper"
            } unless current_user.bookkeeper.nil?
  
  if hash_links.length == 1 
    return ""
  end
  
  content = "<ul>"
  hash_links.each do | key, value |
    if key == current_view
      content << content_tag('li', content_tag('span', value["current"] ), :class => 'current') + " "
    else
      content << content_tag('li', content_tag('a', "<span>" + value["inactive"] + "</span>", :href => "/#{value["path"]}" ), :class => 'inactive') + " "
    end
  end
  content += "</ul>"
  content_tag(:div, content, :id => 'view_links')

end

def formatted_flash_now(add_css=nil, always=false)
  formatted_flash(add_css, always)
  flash[:notice] = nil
  flash[:warning] = nil
end

def formatted_flash_always(add_css=nil)
  formatted_flash(add_css=nil, true)
end

def formatted_flash(add_css=nil, always=false)
  msg = ''
  if flash[:warning] 
    msg = flash[:warning]
    css_class = 'warning flash-warning'
  elsif flash[:notice]
    msg = flash[:notice]
    css_class = 'notice flash-notice'
  else
    unless always
      return "&nbsp;"
    else
      css_class="empty"
    end
  end
  css_class += (add_css.blank? ? "" : " #{add_css}")
  msg = (msg.blank? ? '&nbsp;' : "<div id=\"flash_message\">#{msg}</div>")
  final_string = "<div id=\"flash\" class=\"#{css_class}\">#{msg}</div>"

end

def secure_form_tag(url_for_options = {}, options = {}, *parameters_for_url, &block)
  if use_secure_forms?
    url_for_options[:protocol] = 'https'
    url_for_options[:only_path] = false
  end
  form_tag(url_for_options, options, *parameters_for_url, &block)
end

def secure_form_for(record_or_name_or_array, *args, &proc)
  if use_secure_forms?
    options = args.extract_options!
    
    raise "to use secure_form_for, :url must be specified as an url_for hash" unless options[:url] and options[:url].is_a?(Hash)

    options[:url][:protocol] = 'https'
    options[:url][:only_path] = false
    args << options
  end
  form_for(record_or_name_or_array, *args, &proc)
end

def use_secure_forms?
  # %w{production staging load_testing}.include?(ENV["RAILS_ENV"])
  ::AppConfig.use_ssl
end

def show_admin_popup?
  false
  # %w{staging}.include?(ENV["RAILS_ENV"])  
end

def admin_popup
  out = <<-EOQ
  <script>
//  Sage.popUp(URL) {
//  day = new Date();
//  id = day.getTime();
//  eval("page" + id + " = window.open(URL, '" + id + "', 'toolbar=0,scrollbars=1,location=0,statusbar=1,menubar=0,resizable=1,width=1440,height=900');");

  alert('this is #{ENV["RAILS_ENV"]}');
  </script>
  EOQ
  show_admin_popup? ? out : ''
end

def bottom_corners
  out = <<-EOQ    
<!-- BOTTOM CORNERS -->
<div class="corner_large_bl">
	<div class="corner_large_br">
		<div>
			&nbsp;
		</div>
	</div>
</div>
EOQ
  out
end

def short_company_title
    return current_user.profile.company_name unless current_user.profile.company_name.blank?
    return current_user.profile.contact_name unless current_user.profile.contact_name.blank?
    return current_user.login
end

def user_heard_from
  options = ""
  User.HeardFrom.each do |item|
    options += "<option value='#{item}'>#{item.titleize}</option>"
  end
  options
end

#a generic mechanism for highlighting a mandatory field
#can be customized for a particular purpose, e.g. a mandatory invoiec field
#can work and look differently than a mandatory profile field
def mandatory(obj=nil, parameter=nil)
  if obj.nil?
    str = "<span class='mandatory'> *</span>"
    str = "" if !parameter.blank?
    return str
  elsif (obj.class.to_s == "Profile")
    str = "<span class='mandatory'> *</span>"
    str = "" if obj.is_complete? || !parameter.blank?
    return str
  end
end

def error_message_to_xml(message)
  xml = Builder::XmlMarkup.new(:indent => 2)
  xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
  xml.errors() do
    xml.error(message)
  end
end

def render_inner_layout(type='')
  type ="_#{type}" unless type.blank?
  active_layout_parts = active_layout.split('/')
  active_layout_parts.pop
  render active_layout_parts.push("inner#{type}").join('/')
end

def default_locale?
  return !( GettextLocalize.locale && (GettextLocalize.locale.to_s != ::AppConfig.default_locale))
end

#generate a CSS button that is a link with a span inside. This is to make the css button expands with the containing text
def css_button_link_to( source, options = {} ,  html_options = nil)
  return link_to("<span>"+source+"</span>", options, html_options)
end

#Return an image submit tag 
def css_button_image_submit_tag(source, options = {})
    return tag(:input, { :type => 'image', :alt => options[:alt] })
end

# return the filename for an image file, localized or for a language if possible.
def localized_image_filename (source)
  localized_filename = get_language_filename( source, true )
  language_filename = get_language_filename( source, false )
  if language_image_exists?(localized_filename)
    return localized_filename
  elsif language_image_exists?(language_filename)
    return language_filename
  else
    return source
  end
end

# append the language or locale code to the filename (before the extension)
# in the format filename-pt.gif or filename-pt_BR.gif as specified by "locale"
def get_language_filename( source, use_locale = false )
  before_substring = source.slice(0,(source.rindex(".") ))
  after_substring = source.slice(source.rindex("."), (source.size - before_substring.size) )
  if use_locale
    return "#{before_substring}-#{GettextLocalize.locale.to_s}#{after_substring}"
  else
    return "#{before_substring}-#{GettextLocalize.locale.to_s[0,2]}#{after_substring}"
  end
end
  

# Does the specified image file exist?
def language_image_exists?( filename )
  return ((!filename.blank?) and FileTest.exists?("#{RAILS_ROOT}/public/#{filename}"))
end

#produce either an image_tag or an image_submit_tag with a localized image name
def get_localized_image_tag( source, options = {}, submit = true )
  # two options: either the language (es) or locale (pt_BR) may have an image
  localized_filename = get_language_filename( source, true )
  language_filename = get_language_filename( source, false )

  # try locale override first, then use the default for language
  chosen_string = ""
  if language_image_exists?(localized_filename)
    chosen_string = localized_filename
  elsif language_image_exists?(language_filename)
    chosen_string = language_filename
  else
    return chosen_string
  end
  if submit
    return image_submit_tag( chosen_string, options)
  else
    return image_tag( chosen_string, options)
  end
end

#Return an image submit tag with the image name localized if applicable
def localized_image_submit_tag(source, options = {})
  return image_submit_tag(source, options) if default_locale?
  image_tag = get_localized_image_tag( source, options, true )
  if !image_tag.blank?
    return image_tag
  else
    # fallback on text
    if options[:altclass]
      return tag(:input, { :type => 'image', :alt => options[:alt], :class => options[:altclass] })
    else
      return tag(:input, { :type => 'image', :alt => options[:alt] })
    end
  end
end

#Return an image tag with the image name localized if applicable
def localized_image_tag(source, options = {})
  return image_tag(source, options) if default_locale?
  image_tag = get_localized_image_tag( source, options, false )
  if !image_tag.blank?
    return image_tag
  else
    # fallback on text
    if options[:altclass]
      return "<span class='#{options[:altclass]}'>" + options[:alt] + "</span>"
    else
      return options[:alt]
    end
  end
end

def render_inner_mobile_layout(type='')
  type ="_#{type}" unless type.blank?
  active_layout_parts = active_layout.split('/')
  active_layout_parts.pop
  render active_layout_parts.push("inner_mobile#{type}").join('/')  
end

# Invoice.meta_status comes back as a string in filters; convert faithfully to int
def meta_status_from_str( meta_str)
  meta_val = meta_str
  meta_val = nil if meta_val == ""
  meta_val = Integer(meta_val)
  return meta_val
end  


module ActionView
  module Helpers
    module ActiveRecordHelper      
      def error_messages_for(*params)
        options = params.extract_options!.symbolize_keys
        if object = options.delete(:object)
          objects = [object].flatten
        else
          objects = params.collect {|object_name| instance_variable_get("@#{object_name}") }.compact
        end
        count   = objects.inject(0) {|sum, object| sum + object.errors.count }
        unless count.zero?
          if options[:partial] 
            render :partial => options[:partial], :locals => {:errors => error_messages} 
          else 
            html = {}
            [:id, :class].each do |key|
              if options.include?(key)
                value = options[key]
                html[key] = value unless value.blank?
              else
                html[key] = 'errorExplanation'
              end
            end
            if html[:class] == "errorExplanation" and request.xhr?
              html[:class] = "ExtError"
            end
            options[:object_name] ||= params.first
            unless options.include?(:header_message)
              if count > 1
                options[:header_message] = _("%{num} errors prohibited this %{rec_name} from being saved") % {:num => count, :rec_name => "#{options[:object_name].to_s.gsub('_', ' ')}"} 
              else
                options[:header_message] = _("%{num} error prohibited this %{rec_name} from being saved") % {:num => count, :rec_name => "#{options[:object_name].to_s.gsub('_', ' ')}"}
              end
            end
            error_messages = objects.sum {|object| object.errors.full_messages.map {|msg| content_tag(:li, msg) } }.join
            contents = ''
            contents << content_tag(options[:header_tag] || :h2, options[:header_message]) unless options[:header_message].blank?
            contents << content_tag(:ul, error_messages)

            content_tag(:div, contents, html)
          end
        else
          ''
        end
      end #def error_messages_for 
    end
  end
end

